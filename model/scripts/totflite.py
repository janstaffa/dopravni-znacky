import tensorflow as tf
from tflite_support.metadata_writers import image_classifier
from tflite_support.metadata_writers import writer_utils
from tflite_support import metadata
from tflite_support.metadata_writers import object_detector
from tflite_support.metadata_writers import writer_utils

converter = tf.lite.TFLiteConverter.from_saved_model("../dataset/model/saved_model")
# converter.optimizations = [tf.lite.Optimize.DEFAULT]
tflite_model = converter.convert()

tflite_model_out_path = "../dataset/model/saved_model/dz_model4.tflite"

with open(tflite_model_out_path, "wb") as f:
    f.write(tflite_model)


ObjectDetectorWriter = object_detector.MetadataWriter
# Task Library expects label files that are in the same format as the one below.
_LABEL_FILE = "../dataset/config/labels.txt"
tflite_model_with_meta_out_path = "../dataset/model/saved_model/dz_model4_meta.tflite"
# Normalization parameters is required when reprocessing the image. It is
# optional if the image pixel values are in range of [0, 255] and the input
# tensor is quantized to uint8. See the introduction for normalization and
# quantization parameters below for more details.
# https://www.tensorflow.org/lite/models/convert/metadata#normalization_and_quantization_parameters)
_INPUT_NORM_MEAN = 127.5
_INPUT_NORM_STD = 127.5

# Create the metadata writer.
writer = ObjectDetectorWriter.create_for_inference(
    writer_utils.load_file(tflite_model_out_path),
    [_INPUT_NORM_MEAN],
    [_INPUT_NORM_STD],
    [_LABEL_FILE],
)

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), tflite_model_with_meta_out_path)
